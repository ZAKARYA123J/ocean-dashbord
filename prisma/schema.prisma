generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model Devis {
  id               Int          @id @default(autoincrement())
  nameEntreprise   String?
  namePersone      String
  numberPhon       String?
  ville            String?
  email            String
  votreFonction    String?
  address          String
  codePostal       Int
  message          String
  etage            String
  surfaceId        Int?          // Reference to Surface's ID
  surface          Surface?      @relation(fields: [surfaceId], references: [id], onDelete: SetNull)
  status           Status?
  facture          Facture?
  clientId         Int           // Reference to Client
  client           Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Client {
  id          Int       @id @default(autoincrement())
  nameClient  String
  devis       Devis[]   // One-to-many relation: One client can have multiple Devis
  factures    Facture[] // One-to-many relation: One client can have multiple Factures
}

model Facture {
  id            Int       @id @default(autoincrement())
  dateReserved  DateTime
  dateFacture   DateTime
  factureN      String
  price         Float
  devisId       Int?      @unique // One-to-one relation with Devis
  devis         Devis?    @relation(fields: [devisId], references: [id], onDelete: Cascade)
  clientId      Int       // Reference to Client
  client        Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Surface {
  id        Int       @id @default(autoincrement())
  valeur    String
  devis     Devis[]   // One-to-many relation: One surface can have multiple Devis entries
}

enum Status {
  PENDING
  CONFIRMED
  REJECTED
  COMPLETED
}
